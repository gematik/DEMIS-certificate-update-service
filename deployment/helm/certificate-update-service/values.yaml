# Default values for certificate-update-service.

# Enables debug mode
debug:
  enable: false

# Defines the Schedule for the CronJob
cronJobSchedule: "0 */2 * * *"

# Required Values for the Chart
required:
  suspend: false
  # Define the docker image
  image:
    # The repository where is stored the docker image "certificate-update-service"
    repository: europe-west3-docker.pkg.dev/gematik-all-infra-prod/demis-dev
    # The name of the image
    name: certificate-update-service
    # Overrides the image tag whose default is the chart appVersion.
    # If not given, the Chart AppVersion will be used
    tag: null

# Define custom configuration values
# The Entries will be read from the given (external) Secrets and injected in the container with the same name.
# IMPORTANT: these values must be defined in the Secret Objects
config:
  secret:
    # The (external) Secret for Certificate Files
    certs:
      # The name of the (external) Secret for Certificates and the entries to be used and mapped
      name: ldap-certificates
    # The (external) Secret for Keycloak
    keycloak:
      # The name of the (external) Secret for Keycloak and the entry to be used
      name: keycloak-admin-password
      key: KEYCLOAK_ADMIN_PASSWORD
    # The (external) Secret for Redis
    redis:
      # The name of the (external) Secret for Redis and the entry to be used
      name: redis-cus-writer-password
      key: REDIS_PASSWORD
  # The Persistence Volume Claim where the files are available
  volumeClaim:
    # The (external) Persistence Volume Claim to be used
    name: cus-volume-claim

# Extra Labels to be added
# E.g.
# customLabels:
#   my-label: my-label-value
customLabels: {}

# Extra Environment Variables to be defined
# customEnvVars
#   key: value
customEnvVars:
  # Certificates
  CERT_CA_FILE_PATH: config/root-ca.crt
  CERT_SUB_CA_FILE_PATH: config/sub-ca.crt
  # Keycloak Specific
  KEYCLOAK_BASE_URL: "http://keycloak.demis.svc.cluster.local/"
  KEYCLOAK_TOKEN_URL: "realms/master/protocol/openid-connect/token"
  KEYCLOAK_USERS_URL: "admin/realms/OEGD/users"
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_CLIENTID: "admin-cli"
  KEYCLOAK_GRANTTYPE: "password"
  ROOT_LOG_LEVEL: "INFO"
  REDIS_HOST: "redis-cus.demis.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_USER: "writer"
  # It should be set to "true" only in Live-Test environment!
  FEATURE_FLAG_IMPORT_FROM_DISK: "false"
  # need if Testuser with Sender is recipient used
  FEATURE_FLAG_READ_LAB_CERTIFICATE_FROM_DISK: "false"

# Define custom Container Entrypoint and Arguments (e.g. JVM Tuning)
# If not given, the Entrypoint defined in Dockerfile will be used
application:
  entrypoint: ["java"]
  parameters: ["-XX:ActiveProcessorCount=2", "-XX:MaxRAMPercentage=80.0", "-XX:+TieredCompilation", "-XX:+UseSerialGC", "-jar", "/app/app.jar"]

# Define Image Pull Secrets if using private registry
imagePullSecrets: []
imagePullPolicy: IfNotPresent
nameOverride: "certificate-update-service"
fullnameOverride: "certificate-update-service"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Annotations for Workload
annotations: {}

# Annotations for Pods
podAnnotations: {}

# Pod Security Context - applies to all containers in a Pod
podSecurityContext:
  # The GID to tell the Kubelet to modify permissions of a volume owned by a pod
  fsGroup: 10000
  # Determines when to apply fsGroup actions - "Always" is the default
  fsGroupChangePolicy: "OnRootMismatch"
  # Which GID container process is assigned
  runAsGroup: 10000
  # Determine whether container process starts as root (UID 0)
  runAsNonRoot: true
  # Which UID container process is assigned
  runAsUser: 10000

# Container Security Context for a single container - Takes precedence over PodSecurityContext
securityContext:
  #defines whether container can be granted privileges beyond the parent process spawing the process
  allowPrivilegeEscalation: false
  #Define whether the container has privileged access e.g. CAP_SYS_ADMIN capability and SELinux spc_t type
  privileged: false
  #Usually no longer required. Determines whether /proc is masked to the container. Do not mount /proc from a host to a container
  procMount: Default
  # The SELinux context to be applied to the container. Must not be explicitly set to Unconfined.
  seccompProfile:
    type: "RuntimeDefault"
  #Which GID container process is assigned
  runAsGroup: 10000
  # Determine whether container process starts as root (UID 0)
  runAsNonRoot: true
  #Which UID container process is assigned
  runAsUser: 10000
  # Sets the file system as read-only
  readOnlyRootFilesystem: true
  #Ability to remove and /or add Linux Capabilities
  capabilities:
    drop:
    - all
    
# Resources
resources:
  limits:
    memory: "500Mi"
  requests:
    cpu: "400m"
    memory: "500Mi"

nodeSelector: {}

tolerations: []

affinity: {}

# Enable Istio
istio:
  enable: false
  healthPort: 15020
  quitPort: 15020
